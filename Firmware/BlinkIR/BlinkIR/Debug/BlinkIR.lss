
BlinkIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f1  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000663  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047b  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000158  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	63 c0       	rjmp	.+198    	; 0xcc <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a5 36       	cpi	r26, 0x65	; 101
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	96 c0       	rjmp	.+300    	; 0x16a <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
#include "softuart.h"


int main(void)
{
	DDRB = 0xFF;
  40:	8f ef       	ldi	r24, 0xFF	; 255
  42:	87 bb       	out	0x17, r24	; 23
	uartInit();
  44:	74 d0       	rcall	.+232    	; 0x12e <uartInit>
	char uart_input;
	 char count  = 0x00;
  46:	c0 e0       	ldi	r28, 0x00	; 0
				PORTB |= ( 1 << PINB0) ;
			}
			
		}
		count++;
		 PORTB = ( 1 << PINB0) ;
  48:	d1 e0       	ldi	r29, 0x01	; 1
	 char count  = 0x00;
    /* Replace with your application code */
    while (1) 
	
    {
		uartSend(count);
  4a:	8c 2f       	mov	r24, r28
  4c:	79 d0       	rcall	.+242    	; 0x140 <uartSend>
		
		if (uartAvail()){
  4e:	1d d0       	rcall	.+58     	; 0x8a <uartAvail>
  50:	88 23       	and	r24, r24
  52:	29 f0       	breq	.+10     	; 0x5e <main+0x1e>
			uart_input = uartRecv();
  54:	1d d0       	rcall	.+58     	; 0x90 <uartRecv>
			PORTB |= ( 1 << PINB0);
  56:	c0 9a       	sbi	0x18, 0	; 24
			if (uart_input == count){
  58:	c8 13       	cpse	r28, r24
  5a:	01 c0       	rjmp	.+2      	; 0x5e <main+0x1e>
				PORTB |= ( 1 << PINB0) ;
  5c:	c0 9a       	sbi	0x18, 0	; 24
			}
			
		}
		count++;
  5e:	cf 5f       	subi	r28, 0xFF	; 255
		 PORTB = ( 1 << PINB0) ;
  60:	d8 bb       	out	0x18, r29	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	2f ef       	ldi	r18, 0xFF	; 255
  64:	89 e6       	ldi	r24, 0x69	; 105
  66:	98 e1       	ldi	r25, 0x18	; 24
  68:	21 50       	subi	r18, 0x01	; 1
  6a:	80 40       	sbci	r24, 0x00	; 0
  6c:	90 40       	sbci	r25, 0x00	; 0
  6e:	e1 f7       	brne	.-8      	; 0x68 <main+0x28>
  70:	00 c0       	rjmp	.+0      	; 0x72 <main+0x32>
  72:	00 00       	nop
		_delay_ms(1000);	
		PORTB = (0 << PINB0) ;
  74:	18 ba       	out	0x18, r1	; 24
  76:	2f ef       	ldi	r18, 0xFF	; 255
  78:	89 e6       	ldi	r24, 0x69	; 105
  7a:	98 e1       	ldi	r25, 0x18	; 24
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x3c>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x46>
  86:	00 00       	nop
  88:	e0 cf       	rjmp	.-64     	; 0x4a <main+0xa>

0000008a <uartAvail>:
 */
uint8_t uartAvail() {
#ifndef UART_INTERRUPT
  return 0;
#else
  return g_index;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
#endif
  }
  8e:	08 95       	ret

00000090 <uartRecv>:
 */
char uartRecv() {
  char ch;
#ifdef UART_INTERRUPT
  // Wait for a character
  while(g_index==0);
  90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  94:	88 23       	and	r24, r24
  96:	e1 f3       	breq	.-8      	; 0x90 <uartRecv>
  cli();
  98:	f8 94       	cli
  // Return the first character in the buffer
  ch = g_buffer[0];
  9a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_buffer>
  g_index--;
  9e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  a2:	91 50       	subi	r25, 0x01	; 1
  a4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
  // Move everything down
  for(uint8_t index=0; index<g_index; g_buffer[index] = g_buffer[index + 1], index++);
  a8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  ac:	99 23       	and	r25, r25
  ae:	61 f0       	breq	.+24     	; 0xc8 <uartRecv+0x38>
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	e9 2f       	mov	r30, r25
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ef 59       	subi	r30, 0x9F	; 159
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	21 81       	ldd	r18, Z+1	; 0x01
  bc:	20 83       	st	Z, r18
  be:	9f 5f       	subi	r25, 0xFF	; 255
  c0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  c4:	92 17       	cp	r25, r18
  c6:	a8 f3       	brcs	.-22     	; 0xb2 <uartRecv+0x22>
  // Done
  sei();
  c8:	78 94       	sei
      [rxdelay2] "I" (RXDELAY2)
    : "r0","r18","r19");
  sei();
#endif
  return ch;
  }
  ca:	08 95       	ret

000000cc <__vector_2>:

#ifdef UART_INTERRUPT
/* Interrupt handler for the pin change
 */
ISR(PCINT0_vect) {
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
  uint8_t ch;
  // Make sure it is our pin and it is 0
  if(!(PINB&(1<<UART_RX))) {
  e2:	b2 99       	sbic	0x16, 2	; 22
  e4:	19 c0       	rjmp	.+50     	; 0x118 <StopBit+0x20>
    // Start the read (assuming we have the start bit)
    asm volatile(
  e6:	27 e3       	ldi	r18, 0x37	; 55
  e8:	90 e8       	ldi	r25, 0x80	; 128

000000ea <RxBit>:
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <RxBit>
  ee:	2c e2       	ldi	r18, 0x2C	; 44
  f0:	b2 99       	sbic	0x16, 2	; 22
  f2:	08 94       	sec
  f4:	97 95       	ror	r25
  f6:	c8 f7       	brcc	.-14     	; 0xea <RxBit>

000000f8 <StopBit>:
  f8:	2a 95       	dec	r18
  fa:	f1 f7       	brne	.-4      	; 0xf8 <StopBit>
        [uart_pin] "I" (UART_RX),
        [rxdelay] "I" (RXDELAY),
        [rxdelay2] "I" (RXDELAY2)
      : "r0","r18","r19");
    // Now put it in the buffer (if we have room)
    if(g_index<UART_BUFFER)
  fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 100:	84 30       	cpi	r24, 0x04	; 4
 102:	50 f4       	brcc	.+20     	; 0x118 <StopBit+0x20>
      g_buffer[g_index++] = ch;
 104:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	8e 0f       	add	r24, r30
 10c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ef 59       	subi	r30, 0x9F	; 159
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	90 83       	st	Z, r25
    }
  // TODO: Chain on to the user interrupt handler if available.
  }
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <uartInit>:

/** Initialise the UART
 */
void uartInit() {
  // Set as input and disable pullup
  DDRB  &= ~(1 << UART_RX);
 12e:	ba 98       	cbi	0x17, 2	; 23
  PORTB &= ~(1 << UART_RX);
 130:	c2 98       	cbi	0x18, 2	; 24
#ifdef UART_TWOPIN
  // Set up TX pin
  DDRB |= (1 << UART_TX);
 132:	b9 9a       	sbi	0x17, 1	; 23
  PORTB |= (1 << UART_TX);
 134:	c1 9a       	sbi	0x18, 1	; 24
#  ifdef UART_INTERRUPT
  // Enable pin change interrupts
  PCMSK |= (1 << UART_RX);
 136:	aa 9a       	sbi	0x15, 2	; 21
  GIMSK |= (1 << PCIE);
 138:	8b b7       	in	r24, 0x3b	; 59
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	8b bf       	out	0x3b, r24	; 59
 13e:	08 95       	ret

00000140 <uartSend>:
 *
 * Send a single character on the UART.
 *
 * @param ch the character to send.
 */
void uartSend(char ch) {
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
  // Set to output state and bring high
  PORTB |= (1 << UART_TX);
 144:	c1 9a       	sbi	0x18, 1	; 24
#ifdef UART_ONEPIN
  DDRB  |= (1 << UART_TX);
#endif
  cli();
 146:	f8 94       	cli
  asm volatile(
 148:	c1 98       	cbi	0x18, 1	; 24
 14a:	08 b2       	in	r0, 0x18	; 24
 14c:	e3 e0       	ldi	r30, 0x03	; 3
 14e:	cc e2       	ldi	r28, 0x2C	; 44

00000150 <TxLoop>:
 150:	dc 2f       	mov	r29, r28

00000152 <TxDelay>:
 152:	da 95       	dec	r29
 154:	f1 f7       	brne	.-4      	; 0x152 <TxDelay>
 156:	80 fb       	bst	r24, 0
 158:	01 f8       	bld	r0, 1
 15a:	e6 95       	lsr	r30
 15c:	87 95       	ror	r24
 15e:	08 ba       	out	0x18, r0	; 24
 160:	b9 f7       	brne	.-18     	; 0x150 <TxLoop>
    : [uart_port] "I" (_SFR_IO_ADDR(PORTB)),
      [uart_pin] "I" (UART_TX),
      [txdelay] "I" (TXDELAY),
      [ch] "r" (ch)
    : "r0","r28","r29","r30");
  sei();
 162:	78 94       	sei
#ifdef UART_ONEPIN
  // Change back to idle state
  DDRB  &= ~(1 << UART_TX);
  PORTB &= ~(1 << UART_TX);
#endif
  }
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
